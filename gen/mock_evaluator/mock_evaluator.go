// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/peizhong/codeplay/rpc/evaluator (interfaces: EvaluatorClient)
//
// Generated by this command:
//
//	mockgen github.com/peizhong/codeplay/rpc/evaluator EvaluatorClient
//

// Package mock_evaluator is a generated GoMock package.
package mock_evaluator

import (
	context "context"
	reflect "reflect"

	evaluator "github.com/peizhong/codeplay/rpc/evaluator"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockEvaluatorClient is a mock of EvaluatorClient interface.
type MockEvaluatorClient struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluatorClientMockRecorder
}

// MockEvaluatorClientMockRecorder is the mock recorder for MockEvaluatorClient.
type MockEvaluatorClientMockRecorder struct {
	mock *MockEvaluatorClient
}

// NewMockEvaluatorClient creates a new mock instance.
func NewMockEvaluatorClient(ctrl *gomock.Controller) *MockEvaluatorClient {
	mock := &MockEvaluatorClient{ctrl: ctrl}
	mock.recorder = &MockEvaluatorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluatorClient) EXPECT() *MockEvaluatorClientMockRecorder {
	return m.recorder
}

// SayHello mocks base method.
func (m *MockEvaluatorClient) SayHello(arg0 context.Context, arg1 *evaluator.HelloRequest, arg2 ...grpc.CallOption) (*evaluator.HelloReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHello", varargs...)
	ret0, _ := ret[0].(*evaluator.HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello.
func (mr *MockEvaluatorClientMockRecorder) SayHello(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockEvaluatorClient)(nil).SayHello), varargs...)
}
